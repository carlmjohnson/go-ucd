// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates unicodedata.go. It can be invoked by running
// go generate
package main

import (
	"encoding/csv"
	"io"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

const unicodeDataURL = "http://unicode.org/Public/UCD/latest/ucd/UnicodeData.txt"

type UnicodeRecord struct {
	Codepoint, Name string
}

// getUnicodeRecords returns a slice rather than map so that the file is
// ordered consistently on repeated invocations.
func getUnicodeRecords() []UnicodeRecord {
	rsp, err := http.Get(unicodeDataURL)
	defer rsp.Body.Close()

	if err != nil {
		log.Fatal(err)
	}

	records := make([]UnicodeRecord, 0)

	reader := csv.NewReader(rsp.Body)
	reader.Comma = ';'
	reader.FieldsPerRecord = 15

	for {
		record, err := reader.Read()

		if err == io.EOF {
			return records
		} else if err != nil {
			log.Fatal(err)
		}
		records = append(records, UnicodeRecord{record[0], record[1]})
	}
}

const templateString = `// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .URL }}

package unicodedata

var UCD = map[string]string{
{{ range .Records }}
	{{ if isComment . }}// {{ end }}{{ printf "%q" .Codepoint }}: {{ printf "%q" .Name }},{{ end }}
}
`

func isComment(r UnicodeRecord) bool {
	return r.Name[0] == '<' || r.Name[len(r.Name)-1] == '>'
}

var packageTemplate = template.Must(template.New("package").
	Funcs(template.FuncMap{"isComment": isComment}).
	Parse(templateString))

func main() {
	records := getUnicodeRecords()
	data := struct {
		URL       string
		Timestamp time.Time
		Records   []UnicodeRecord
	}{
		URL:       unicodeDataURL,
		Timestamp: time.Now().UTC(),
		Records:   records,
	}

	file, err := os.Create("unicodedata.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	if err := packageTemplate.Execute(file, data); err != nil {
		log.Fatal(err)
	}
}
